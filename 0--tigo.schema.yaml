# Rime schema
# encoding: utf-8
#
schema:
  schema_id: 0--tigo
  name: Tigo·万象
  version: "2025-01-01"
  author:
    - amzxyz
    - rayalizing
  description: |
    虎码整句，基于万象词库的方案
  dependencies:
    - melt_eng        # 英文输入，作为次翻译器挂载到拼音方案
    - radical_pinyin  # 反查：部件拆字，反查及辅码
    # - stroke          #反查：笔画组字
    - charset         #字符集过滤器
    - 0--tigress      #虎码简词

__include: wanxiang.schema:/  # 继承万象的大部分方案配置

######自定义区######
__patch:
# 自定义词库
  translator/dictionary/=: 0--tigo  # 挂载词库 0--tigo.dict.yaml
  user_dict_set/dictionary/=: 0--tigo  
  add_user_dict/dictionary/=: 0--tigo    # 自定义词典加词(ac引导)
  
  # 虎词库导入并置顶, 实现前四码的首选为虎词（同时取消万象原方案中成语的拼音简码，一箭双雕）
  chengyu:
    dictionary: 0--tigress     # 挂载词库 0--tigress.dict.yaml
    enable_sentence: false   # 禁止造句
    enable_user_dict: false  # 禁用用户词典，是否开启自动调频
    initial_quality: 9999999       # 初始权重（足够大，保证前四码的首选为虎词）
    comment_format:          # 自定义提示码
      - xform/.*//           # 清空提示码

# 自定义超级注释：
  pro_comment_format:   # 超级注释模块 修改辅助码提示为虎码简码
    candidate_length: 1
    fuzhu_type: jdh    # 这里选用jdh,是因为虎码简码占的就是简单鹤(jdh)的位置
    corrector_type: "{comment}"
# 自定义符号：
  punctuator:
    digit_separators: ":,."  #数字分隔符
    __include: 0--core/rays_symbols:/punctuator    # 挂载我的符号文件
# 自定义改键：
  key_binder/bindings/@1/=: { when: has_menu, accept: apostrophe, send: 2 }  # 将原版的分号二选改为单引号二选
  key_binder/bindings/@next/+: { when: has_menu, accept: slash, send: 3 }  # 增加斜杠三选
      # 列表项的起始数为0，所以这里@1表示列表中的第二个元素
# 反查方案修改:
  reverse_stroke/prefix/=: "=="  # 修改reverse_stroke的prefix(由``变为st)，防止与九键虎码的`冲突
  recognizer/patterns/reverse_stroke/=: "^==[1@#45]*$"
  radical_lookup/prefix/=: "==="  # 修改radical_lookup的prefix(由`变为rd)，防止与九键虎码的`冲突
  recognizer/patterns/radical_lookup/=: "^===[A-Za-z]*$"
  reverse_lookup:  # 同步虎码方案的PY_c反查
    dictionary: PY_c
    prefix: "`"
    tips: "〔拼音〕"
    preedit_format:
      - "xform/([nl])v/$1ü/"
      - "xform/([nl])ue/$1üe/"
      - "xform/([jqxy])v/$1u/"
    comment_format:
      - "xform/^/ /"
    # suffix: "'"
  engine/translators/@next/+:  #拼音反查
  recognizer/patterns/reverse_lookup/=: "^`[a-z]*'?$"

# 增加拆分滤镜:
  chaifen:  # 拆分滤镜
    opencc_config: hu_cf.json
    option_name: chaifen
    show_in_comment: true 
    comment_format:     
      - "xform/&nbsp;/ /"
    tags:     
      - abc
      - tiger
      - tigress
      - reverse_lookup
    tips: all  #只给单字加滤镜，改为 char 。 词也显示，改为 all
  engine/filters/@next/+: simplifier@chaifen #拆分滤镜
  switches/@next/+:
    name: chaifen
    reset: 0 
    states: [ 拆隐, 拆显 ]
# 增加自定义开关
  key_binder/bindings/@next/+: { accept: "Control+i", toggle: emoji, when: composing }  # PC emoji开关
  key_binder/bindings/@next/+: { when: composing, accept: '&', toggle: emoji_cn } # 手机 emoji开关
  key_binder/bindings/@next/+: { when: composing, accept: '^', toggle: traditionalization } # 手机 繁简开关
  key_binder/bindings/@next/+: { accept: "Control+j", toggle: chaifen, when: composing } # PC 拆分滤镜开关
  key_binder/bindings/@next/+: { when: composing, accept: '%', toggle: chaifen } # 手机 拆分滤镜开关

# 自定义拼写运算(本方案的核心)
  speller:
    alphabet: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA`;[
    initials: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA;
    # delimiter: " '"  # 第一位<空格>是拼音之间的分隔符；第二位<'>表示可以手动输入单引号来分割拼音。
    algebra:
    # 提取虎码的简码和全码（格式示例：u_unid）
      - xform|^.*?;.*?;.*?;.*?;(.+?);(.+?);.*$|$1_$2| #这里将;换成了_,避免了后续操作对我所有自定义词典的影响

    # 以下均须操作第二组【全码】：
      - derive|^.+?_([a-z]{2}).*$|$1| # 纯双拼的情况（这里指所有的前两码）
      - abbrev|^.+?_([a-z]{4})$|$1| # abbrev类型不可以整句内输入2位辅助码，必须加[
      - derive|^.+?_([a-z]{4})$|$1[| # 输入4码加[出单字,增强单字性能

    # 3码【简码】的字，【简码】后加[, 增强单字性能
      - abbrev|^([a-z]{3})_.*$|$1|
      - derive|^([a-z]{3})_.*$|$1[|

    # 2码【简码】的字，【简码】后加[ , 增强单字性能
      - derive|^([a-z]{2})_.*$|$1[|

    # 1码【简码】的字，【简码】后加; , 增强单字性能
      - derive|^([a-z])_.*$|$1|
      - derive|^([a-z])_.*$|$1;|

    # 删除原始编码以加速检索
      - erase/^(.+)_(.+)$/