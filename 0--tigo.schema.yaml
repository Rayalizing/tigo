# Rime schema
# encoding: utf-8
#
schema:
  schema_id: 0--tigo
  name: Tigo·万象
  version: "2025-01-01"
  author:
    - amzxyz
    - rayalizing
  description: |
    虎码整句，基于万象词库的方案
  dependencies:
    - melt_eng        # 英文输入，作为次翻译器挂载到拼音方案
    - radical_pinyin  # 反查：部件拆字，反查及辅码
    - stroke          #反查：笔画组字
    - core2022        #字符集过滤器
    - PY_c            #反查: 拼音
    - 0--tigress      #虎码简词

__include: wanxiang.schema:/  # 继承万象的大部分方案配置

######自定义区######
__patch:
# 自定义词库
  translator/dictionary/=: 0--tigo  # 挂载词库 0--tigo.dict.yaml
  user_dict_set/dictionary/=: 0--tigo  
  add_user_dict/dictionary/=: 0--tigo    # 自定义词典加词(ac引导)
  
# custom_phrase 导入全量虎词库, 实现前四码的首选为虎词。
  custom_phrase/user_dict/=: 0--core/custom_phrase/tigress_all
  engine/filters/@2/=: lua_filter@*autocap_filter   # 将原来位置的assist_sort排序功能顶掉(因为它只适合辅助码与前两码分离的整句模式，不适配我的形码整句，并且与虎码的前四码输入习惯冲突)
  chengyu/user_dict/=: "" # 取消万象原方案中成语的拼音简码

# 自定义开关(声调显示改为默认关闭)：
  switches/@6/=:
    name: tone_display
    states: [ 原码, 声调 ]
    reset: 0

# 自定义超级注释：
  pro_comment_format:   # 超级注释模块 修改辅助码提示为虎码简码
    candidate_length: 1
    fuzhu_type: jdh    # 这里选用jdh,是因为虎码简码占的就是简单鹤(jdh)的位置
    corrector_type: "{comment}"
# 自定义符号：
  punctuator:
    digit_separators: ":,."  #数字分隔符
    __include: 0--core/rays_symbols:/punctuator    # 挂载我的符号文件
# 自定义改键：
  key_binder/bindings/@1/=: { when: has_menu, accept: apostrophe, send: 2 }  # 将原版的分号二选改为单引号二选
  key_binder/bindings/@next/+: { when: has_menu, accept: slash, send: 3 }  # 增加斜杠三选
      # 列表项的起始数为0，所以这里@1表示列表中的第二个元素
# 反查方案修改:
  reverse_stroke/prefix/=: "=="  # 修改reverse_stroke的prefix(由``变为==)，防止与九键虎码的`冲突
  recognizer/patterns/reverse_stroke/=: "^==[hspnz]*$"
  radical_lookup/prefix/=: "==="  # 修改radical_lookup的prefix(由`变为===)，防止与九键虎码的`冲突
  recognizer/patterns/radical_lookup/=: "^===[A-Za-z]*$"
  reverse_lookup:  # 同步虎码方案的PY_c反查
    dictionary: PY_c
    prefix: "`"
    tips: "〔拼音〕"
    preedit_format:
      - "xform/([nl])v/$1ü/"
      - "xform/([nl])ue/$1üe/"
      - "xform/([jqxy])v/$1u/"
    comment_format:
      - "xform/^/ /"
    # suffix: "'"
  engine/translators/@next/+: reverse_lookup_translator #拼音反查
  recognizer/patterns/reverse_lookup/=: "^`[a-z]*'?$"

# 增加自定义开关
  key_binder/bindings/@next/+: { accept: "Control+i", toggle: emoji, when: composing }  # PC emoji开关
  key_binder/bindings/@next/+: { when: composing, accept: '&', toggle: emoji_cn } # 手机 emoji开关
  key_binder/bindings/@next/+: { when: composing, accept: '^', toggle: traditionalization } # 手机 繁简开关
  key_binder/bindings/@next/+: { accept: "Control+j", toggle: chaifen, when: composing } # PC 拆分滤镜开关
  key_binder/bindings/@next/+: { when: composing, accept: '%', toggle: chaifen } # 手机 拆分滤镜开关

# 自定义拼写运算(本方案的核心)
  speller:
    alphabet: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA`;[
    initials: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA;
    # delimiter: " '"  # 第一位<空格>是拼音之间的分隔符；第二位<'>表示可以手动输入单引号来分割拼音。
    algebra:
      # 提取虎码的简码和全码（格式示例：u_unid）
      - xform|^.*?;.*?;.*?;.*?;(.+?);(.+?);.*$|$1_$2| #这里将;换成了_,避免了后续操作对我所有自定义词典的影响

      # 以下均须操作第二组【全码】, 且操作对象排除了简码为一码的字：
      - derive|^..+?_([a-z]{2}).*$|$1| # 纯双拼的情况（这里指所有的前两码）

      # 4码【简码】的字(即没有简码), 四码后加[ , 增强单字性能
      - abbrev|^....+?_([a-z]{4})$|$1| # abbrev类型不可以整句内输入2位辅助码，必须加[
      - derive|^....+?_([a-z]{4})$|$1[| # 输入4码加[出单字,增强单字性能

      # 3码【简码】的字，【简码】后加[, 增强单字性能
      - abbrev|^([a-z]{3})_.*$|$1|
      - derive|^([a-z]{3})_.*$|$1[|

      # 2码【简码】的字，【简码】后加[ , 增强单字性能
      - derive|^([a-z]{2})_.*$|$1[|

      # 1码【简码】的字，【简码】后加; , 增强单字性能
      - abbrev|^([a-z])_.*$|$1|  # 这里使用abbrev类型，防止单个字母影响整句中三码单字的输入
      - derive|^([a-z])_.*$|$1;|

      # 删除原始编码以加速检索
      - erase/^(.+)_(.+)$/